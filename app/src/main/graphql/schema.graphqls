type Courier {
  id: UUID!

  user_id: UUID!

  user: User!

  avatar: Uploads

  verified: Boolean!

  status: CourierStatus!

  rating: Float!

  location: Gps!

  trip_id: UUID

  trip: Trip

  product_id: UUID!

  product: Product!

  completedTrips: Int!

  points: Int!

  upload_id: UUID

  created_at: Time

  updated_at: Time
}

enum CourierStatus {
  OFFLINE

  ONLINE

  ONBOARDING
}

input CourierUploadInput {
  type: UploadFile!

  uri: String!
}

input CreateTripInput {
  tripInput: TripRouteInput!

  tripProductId: String!

  recipient: TripRecipientInput!

  confirmedPickup: TripInput!
}

type Geocode {
  placeId: String!

  formattedAddress: String!

  location: Gps!
}

type Gps {
  lat: Float!

  lng: Float!
}

input GpsInput {
  lat: Float!

  lng: Float!
}

type Mutation {
  createCourierDocument(input: CourierUploadInput!): Boolean!

  trackCourierGps(input: GpsInput!): Boolean!

  setCourierStatus(status: String!): Boolean!

  createTrip(input: CreateTripInput!): Trip!

  reportTripStatus(tripId: UUID!, status: TripStatus!): Boolean!
}

type Place {
  id: String!

  mainText: String!

  secondaryText: String!
}

type Product {
  id: UUID!

  name: String!

  description: String!

  icon_url: String!

  price: Int!

  created_at: Time

  updated_at: Time
}

type Query {
  hello: String!

  getCourierDocuments: [Uploads!]!

  searchPlace(textQuery: String!): [Place!]!

  reverseGeocode(place: GpsInput!): Geocode

  computeTripRoute(input: TripRouteInput!): TripRoute!

  getCourierNearPickupPoint(point: GpsInput!): [Courier!]!

  getTripDetails(tripId: UUID!): Trip!

  getCourierTrip: Trip!
}

type Recipient {
  id: UUID!

  name: String!

  building_name: String

  unit_name: String

  phone: String!

  trip_note: String!

  trip_id: UUID!

  trip: Trip!

  created_at: Time

  updated_at: Time
}

type Route {
  id: UUID!

  distance: String!

  eta: Time!

  created_at: Time

  updated_at: Time
}

type Session {
  id: UUID!

  first_name: String

  last_name: String

  ip: String!

  userAgent: String!

  token: String!

  isCourier: Boolean!

  onboarding: Boolean!

  phone: String!

  courierStatus: CourierStatus
}

type Subscription {
  tripUpdates(tripId: UUID!): TripUpdate!

  assignTrip: TripUpdate!
}

scalar Time

type Trip {
  id: UUID!

  courier_id: UUID

  courier: Courier

  user_id: UUID!

  start_location: Gps

  end_location: Gps

  status: TripStatus!

  cost: Int!

  route: TripRoute

  recipient: Recipient!

  created_at: Time

  updated_at: Time
}

input TripInput {
  placeId: String!

  formattedAddress: String!

  location: GpsInput!
}

input TripRecipientInput {
  name: String!

  building_name: String

  unit_name: String

  phone: String!

  trip_note: String!
}

type TripRoute {
  polyline: String!

  distance: Int!

  availableProducts: [Product!]!
}

input TripRouteInput {
  pickup: TripInput!

  dropoff: TripInput!
}

enum TripStatus {
  COURIER_EN_ROUTE

  CANCELLED

  COMPLETE

  COURIER_ASSIGNED

  COURIER_ARRIVING

  COURIER_FOUND

  COURIER_NOT_FOUND
}

type TripUpdate {
  id: UUID!

  status: TripStatus!

  courierId: UUID

  location: Gps
}

scalar UUID

enum UploadFile {
  DP

  MCR

  ID

  PC

  LB

  VI
}

enum UploadVerificationStatus {
  VERIFYING

  VERIFIED

  REJECTED

  ONBOARDING
}

type Uploads {
  ID: UUID!

  type: String!

  uri: String!

  verification: UploadVerificationStatus!

  courier_id: UUID

  user_id: UUID

  created_at: Time

  updated_at: Time
}

type User {
  id: UUID!

  first_name: String!

  last_name: String!

  phone: String!

  courier_id: UUID

  courier: Courier

  created_at: Time

  updated_at: Time
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Directive {
  name: String!

  description: String

  locations: [__DirectiveLocation!]!

  args: [__InputValue!]!

  isRepeatable: Boolean!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
enum __DirectiveLocation {
  QUERY

  MUTATION

  SUBSCRIPTION

  FIELD

  FRAGMENT_DEFINITION

  FRAGMENT_SPREAD

  INLINE_FRAGMENT

  VARIABLE_DEFINITION

  SCHEMA

  SCALAR

  OBJECT

  FIELD_DEFINITION

  ARGUMENT_DEFINITION

  INTERFACE

  UNION

  ENUM

  ENUM_VALUE

  INPUT_OBJECT

  INPUT_FIELD_DEFINITION
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Field {
  name: String!

  description: String

  args: [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Schema {
  description: String

  types: [__Type!]!

  queryType: __Type!

  mutationType: __Type

  subscriptionType: __Type

  directives: [__Directive!]!
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields: [__InputValue!]

  ofType: __Type

  specifiedByURL: String
}

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
enum __TypeKind {
  SCALAR

  OBJECT

  INTERFACE

  UNION

  ENUM

  INPUT_OBJECT

  LIST

  NON_NULL
}

"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer (if: Boolean = true, label: String) on FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.
"""
directive @deprecated (reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.
"""
directive @include (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.
"""
directive @skip (if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

# See https://github.com/JetBrains/js-graphql-intellij-plugin/issues/665
# noinspection GraphQLTypeRedefinition
"""
The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.
"""
directive @specifiedBy (url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
